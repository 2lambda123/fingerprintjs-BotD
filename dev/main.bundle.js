(()=>{var n={800:(n,e,t)=>{"use strict";t.d(e,{Z:()=>h});var o=t(537),i=t.n(o),r=t(645),a=t.n(r),s=t(667),c=t.n(s),u=new URL(t(790),t.b),l=new URL(t(373),t.b),d=new URL(t(516),t.b),A=new URL(t(82),t.b),p=new URL(t(837),t.b),b=a()(i()),f=c()(u),g=c()(l),w=c()(d),m=c()(A),v=c()(p);b.push([n.id,":root {\n  --accent-color: rgb(240, 68, 5);\n  --accent-dark-color: rgb(140, 39, 3);\n  --error-color: #b3261e;\n  --font-family: 'Fira Mono', monospace;\n  --font-family-consolas: Consolas, 'Liberation Mono', Menlo, Courier, monospace;\n}\n\nbody {\n  width: 100%;\n  height: 100%;\n  cursor: default;\n  margin: 0px;\n  padding: 0px;\n  background-color: #f2f2f7;\n  color: #000;\n  font-size: 14px;\n  position: relative;\n  overflow-x: hidden;\n  font-weight: 400;\n  font-family: var(--font-family);\n  padding-bottom: 24px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.container {\n  width: calc(100% - 128px);\n  max-width: 1536px;\n  margin: 0 auto;\n}\n\n.medium-container {\n  width: calc(100% - 32px);\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n#navbar {\n  width: 100%;\n  height: 96px;\n  background-color: #fff;\n}\n\n#navbar a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#navbar .container {\n  display: flex;\n  align-items: center;\n  height: 100%;\n}\n\n#navbar-chevron {\n  width: 24px;\n  height: 24px;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-image: url("+f+");\n  opacity: 0.2;\n  margin-left: 8px;\n}\n\n#navbar .logo-ref {\n  width: max-content;\n}\n\n#navbar .logo {\n  width: 196px;\n  margin-top: 2px;\n}\n\n@media only screen and (max-width: 700px) {\n  #navbar {\n    height: auto;\n  }\n\n  #navbar .container {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  #navbar .logo-ref {\n    margin-top: 32px;\n  }\n\n  #navbar .logo {\n    margin-top: 0;\n    width: 256px;\n  }\n\n  #navbar #navbar-chevron {\n    transform: rotate(90deg);\n  }\n\n  #navbar #playground-actions {\n    margin-left: 0;\n    margin: 32px 0px;\n  }\n}\n\nh1,\nh2 {\n  font-weight: 700;\n  color: #0d102b;\n}\nh1 {\n  font-size: 24px;\n}\nh2 {\n  font-size: 20px;\n}\n\n.content {\n  height: 100vh;\n  width: calc(100% - 64px);\n  max-width: 960px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n\n.github-card {\n  display: flex;\n  align-items: center;\n  border-radius: 8px;\n  user-select: none;\n  padding: 8px;\n}\n\n.github-card:hover {\n  background-color: rgba(0, 0, 0, 0.06);\n  transition: 0.15s;\n}\n\n.github-card:active,\n.github-card:focus {\n  background-color: rgba(0, 0, 0, 0.12);\n  transition: 0.15s;\n}\n\n.github-card::before {\n  display: block;\n  content: '';\n  width: 32px;\n  height: 32px;\n  background-image: url("+g+");\n  background-size: 24px;\n  background-repeat: no-repeat;\n  background-position: center;\n  margin-right: 4px;\n}\n\n#playground-actions {\n  display: flex;\n  align-items: center;\n  column-gap: 16px;\n  margin-left: auto;\n}\n\n.button {\n  width: fit-content;\n  height: fit-content;\n  padding: 12px 20px;\n  border-radius: 6px;\n  outline: none;\n  margin: none;\n  border: none;\n  font-size: 14px;\n  font-family: var(--font-family);\n  transition: 0.15s background-color;\n  font-weight: 600;\n}\n\n.orange-button {\n  background-color: var(--accent-color);\n  color: #fff;\n  border: 2px solid transparent;\n}\n\n.orange-button-outlined {\n  border: 2px solid var(--accent-color);\n  color: var(--accent-color);\n  background-color: transparent;\n}\n\n.orange-button:hover,\n.orange-button:active,\n.orange-button:focus {\n  background-color: var(--accent-dark-color);\n}\n\n.orange-button-outlined:hover,\n.orange-button-outlined:active,\n.orange-button-outlined:focus {\n  background-color: rgba(240, 68, 5, 0.12);\n}\n\n.content-card {\n  overflow: hidden;\n}\n\n.content-card-header {\n  font-size: 20px;\n  font-weight: 600;\n  padding: var(--content-card-padding);\n}\n\n#result {\n  overflow: hidden;\n  margin: 96px auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  --bot-icon-color: #4caf50;\n  --bot-icon-url: url("+w+");\n}\n\n.result-detected {\n  --bot-icon-color: #f44336 !important;\n  --bot-icon-url: url("+m+") !important;\n}\n\n.result-error {\n  --bot-icon-color: var(--error-color) !important;\n  --bot-icon-url: url("+v+") !important;\n}\n\n.result-bot-icon-container {\n  width: 128px;\n  height: 128px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.result-bot-icon-container::before {\n  content: '';\n  display: block;\n  background-color: var(--bot-icon-color);\n  opacity: 0.08;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  border-radius: 100%;\n  transition: 0.2s background-color;\n}\n\n.result-bot-icon {\n  width: 52px;\n  height: 52px;\n  mask-image: var(--bot-icon-url);\n  -webkit-mask-image: var(--bot-icon-url);\n  mask-size: 100%;\n  mask-repeat: no-repeat;\n  mask-position: center;\n  background-color: var(--bot-icon-color);\n  position: relative;\n  transition: 0.2s mask-image, 0.2s -webkit-mask-image, 0.2s background-color;\n}\n\n#result-text {\n  margin-top: 24px;\n  font-size: 18px;\n  font-weight: 600;\n  color: var(--bot-icon-color);\n  transition: 0.2s color;\n}\n\n.logs-content {\n  background-color: #282c34;\n  color: #fff;\n  border-radius: 12px;\n  padding: 24px;\n  margin-top: 12px;\n  font-family: var(--font-family-consolas);\n}\n\n.logs-buttons-list {\n  display: flex;\n  margin-left: auto;\n}\n\n.logs-top-bar {\n  display: flex;\n  align-items: center;\n}\n\n.logs-section:not(:first-child) {\n  margin-top: 24px;\n}\n\n.logs-section-header {\n  color: var(--accent-color);\n  font-size: 14px;\n}\n\n.logs-section-content {\n  font-size: 12px;\n  margin-top: 1em;\n  white-space: pre-wrap;\n}\n\n#error-container {\n  margin-bottom: 96px;\n  padding: 24px;\n  border: 2px solid var(--error-color);\n  border-radius: 12px;\n  font-family: var(--font-family-consolas);\n  font-size: 14px;\n  line-height: 2;\n  display: none;\n}\n\n.error-container-visible {\n  display: block !important;\n}\n","",{version:3,sources:["webpack://./playground/style.css"],names:[],mappings:"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",sourcesContent:[":root {\n  --accent-color: rgb(240, 68, 5);\n  --accent-dark-color: rgb(140, 39, 3);\n  --error-color: #b3261e;\n  --font-family: 'Fira Mono', monospace;\n  --font-family-consolas: Consolas, 'Liberation Mono', Menlo, Courier, monospace;\n}\n\nbody {\n  width: 100%;\n  height: 100%;\n  cursor: default;\n  margin: 0px;\n  padding: 0px;\n  background-color: #f2f2f7;\n  color: #000;\n  font-size: 14px;\n  position: relative;\n  overflow-x: hidden;\n  font-weight: 400;\n  font-family: var(--font-family);\n  padding-bottom: 24px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.container {\n  width: calc(100% - 128px);\n  max-width: 1536px;\n  margin: 0 auto;\n}\n\n.medium-container {\n  width: calc(100% - 32px);\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n#navbar {\n  width: 100%;\n  height: 96px;\n  background-color: #fff;\n}\n\n#navbar a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#navbar .container {\n  display: flex;\n  align-items: center;\n  height: 100%;\n}\n\n#navbar-chevron {\n  width: 24px;\n  height: 24px;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-image: url(../resources/chevron_right.svg);\n  opacity: 0.2;\n  margin-left: 8px;\n}\n\n#navbar .logo-ref {\n  width: max-content;\n}\n\n#navbar .logo {\n  width: 196px;\n  margin-top: 2px;\n}\n\n@media only screen and (max-width: 700px) {\n  #navbar {\n    height: auto;\n  }\n\n  #navbar .container {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  #navbar .logo-ref {\n    margin-top: 32px;\n  }\n\n  #navbar .logo {\n    margin-top: 0;\n    width: 256px;\n  }\n\n  #navbar #navbar-chevron {\n    transform: rotate(90deg);\n  }\n\n  #navbar #playground-actions {\n    margin-left: 0;\n    margin: 32px 0px;\n  }\n}\n\nh1,\nh2 {\n  font-weight: 700;\n  color: #0d102b;\n}\nh1 {\n  font-size: 24px;\n}\nh2 {\n  font-size: 20px;\n}\n\n.content {\n  height: 100vh;\n  width: calc(100% - 64px);\n  max-width: 960px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n\n.github-card {\n  display: flex;\n  align-items: center;\n  border-radius: 8px;\n  user-select: none;\n  padding: 8px;\n}\n\n.github-card:hover {\n  background-color: rgba(0, 0, 0, 0.06);\n  transition: 0.15s;\n}\n\n.github-card:active,\n.github-card:focus {\n  background-color: rgba(0, 0, 0, 0.12);\n  transition: 0.15s;\n}\n\n.github-card::before {\n  display: block;\n  content: '';\n  width: 32px;\n  height: 32px;\n  background-image: url(../resources/github_icon.svg);\n  background-size: 24px;\n  background-repeat: no-repeat;\n  background-position: center;\n  margin-right: 4px;\n}\n\n#playground-actions {\n  display: flex;\n  align-items: center;\n  column-gap: 16px;\n  margin-left: auto;\n}\n\n.button {\n  width: fit-content;\n  height: fit-content;\n  padding: 12px 20px;\n  border-radius: 6px;\n  outline: none;\n  margin: none;\n  border: none;\n  font-size: 14px;\n  font-family: var(--font-family);\n  transition: 0.15s background-color;\n  font-weight: 600;\n}\n\n.orange-button {\n  background-color: var(--accent-color);\n  color: #fff;\n  border: 2px solid transparent;\n}\n\n.orange-button-outlined {\n  border: 2px solid var(--accent-color);\n  color: var(--accent-color);\n  background-color: transparent;\n}\n\n.orange-button:hover,\n.orange-button:active,\n.orange-button:focus {\n  background-color: var(--accent-dark-color);\n}\n\n.orange-button-outlined:hover,\n.orange-button-outlined:active,\n.orange-button-outlined:focus {\n  background-color: rgba(240, 68, 5, 0.12);\n}\n\n.content-card {\n  overflow: hidden;\n}\n\n.content-card-header {\n  font-size: 20px;\n  font-weight: 600;\n  padding: var(--content-card-padding);\n}\n\n#result {\n  overflow: hidden;\n  margin: 96px auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  --bot-icon-color: #4caf50;\n  --bot-icon-url: url(../resources/robot-off-outline.svg);\n}\n\n.result-detected {\n  --bot-icon-color: #f44336 !important;\n  --bot-icon-url: url(../resources/robot-outline.svg) !important;\n}\n\n.result-error {\n  --bot-icon-color: var(--error-color) !important;\n  --bot-icon-url: url(../resources/alert-circle-outline.svg) !important;\n}\n\n.result-bot-icon-container {\n  width: 128px;\n  height: 128px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.result-bot-icon-container::before {\n  content: '';\n  display: block;\n  background-color: var(--bot-icon-color);\n  opacity: 0.08;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  border-radius: 100%;\n  transition: 0.2s background-color;\n}\n\n.result-bot-icon {\n  width: 52px;\n  height: 52px;\n  mask-image: var(--bot-icon-url);\n  -webkit-mask-image: var(--bot-icon-url);\n  mask-size: 100%;\n  mask-repeat: no-repeat;\n  mask-position: center;\n  background-color: var(--bot-icon-color);\n  position: relative;\n  transition: 0.2s mask-image, 0.2s -webkit-mask-image, 0.2s background-color;\n}\n\n#result-text {\n  margin-top: 24px;\n  font-size: 18px;\n  font-weight: 600;\n  color: var(--bot-icon-color);\n  transition: 0.2s color;\n}\n\n.logs-content {\n  background-color: #282c34;\n  color: #fff;\n  border-radius: 12px;\n  padding: 24px;\n  margin-top: 12px;\n  font-family: var(--font-family-consolas);\n}\n\n.logs-buttons-list {\n  display: flex;\n  margin-left: auto;\n}\n\n.logs-top-bar {\n  display: flex;\n  align-items: center;\n}\n\n.logs-section:not(:first-child) {\n  margin-top: 24px;\n}\n\n.logs-section-header {\n  color: var(--accent-color);\n  font-size: 14px;\n}\n\n.logs-section-content {\n  font-size: 12px;\n  margin-top: 1em;\n  white-space: pre-wrap;\n}\n\n#error-container {\n  margin-bottom: 96px;\n  padding: 24px;\n  border: 2px solid var(--error-color);\n  border-radius: 12px;\n  font-family: var(--font-family-consolas);\n  font-size: 14px;\n  line-height: 2;\n  display: none;\n}\n\n.error-container-visible {\n  display: block !important;\n}\n"],sourceRoot:""}]);const h=b},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var u=0;u<n.length;u++){var l=[].concat(n[u]);o&&a[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),e.push(l))}},e}},667:n=>{"use strict";n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(i," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([r]).join("\n")}return[e].join("\n")}},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var r={},a=[],s=0;s<n.length;s++){var c=n[s],u=o.base?c[0]+o.base:c[0],l=r[u]||0,d="".concat(u," ").concat(l);r[u]=l+1;var A=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var b=i(p,o);o.byIndex=s,e.splice(s,0,{identifier:d,updater:b,references:1})}a.push(d)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var r=o(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<r.length;a++){var s=t(r[a]);e[s].references--}for(var c=o(n,i),u=0;u<r.length;u++){var l=t(r[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}r=c}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,i&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},238:function(n,e,t){var o;!function(i,r){"use strict";var a="function",s="undefined",c="object",u="string",l="major",d="model",A="name",p="type",b="vendor",f="version",g="architecture",w="console",m="mobile",v="tablet",h="smarttv",E="wearable",C="embedded",x="Amazon",B="Apple",y="ASUS",k="BlackBerry",_="Browser",S="Chrome",T="Firefox",z="Google",P="Huawei",j="LG",q="Microsoft",L="Motorola",O="Opera",M="Samsung",W="Sharp",I="Sony",R="Xiaomi",N="Zebra",D="Facebook",Y="Chromium OS",U="Mac OS",F=function(n){for(var e={},t=0;t<n.length;t++)e[n[t].toUpperCase()]=n[t];return e},Z=function(n,e){return typeof n===u&&-1!==H(e).indexOf(H(n))},H=function(n){return n.toLowerCase()},V=function(n,e){if(typeof n===u)return n=n.replace(/^\s\s*/,""),typeof e===s?n:n.substring(0,350)},K=function(n,e){for(var t,o,i,s,u,l,d=0;d<e.length&&!u;){var A=e[d],p=e[d+1];for(t=o=0;t<A.length&&!u&&A[t];)if(u=A[t++].exec(n))for(i=0;i<p.length;i++)l=u[++o],typeof(s=p[i])===c&&s.length>0?2===s.length?typeof s[1]==a?this[s[0]]=s[1].call(this,l):this[s[0]]=s[1]:3===s.length?typeof s[1]!==a||s[1].exec&&s[1].test?this[s[0]]=l?l.replace(s[1],s[2]):r:this[s[0]]=l?s[1].call(this,l,s[2]):r:4===s.length&&(this[s[0]]=l?s[3].call(this,l.replace(s[1],s[2])):r):this[s]=l||r;d+=2}},X=function(n,e){for(var t in e)if(typeof e[t]===c&&e[t].length>0){for(var o=0;o<e[t].length;o++)if(Z(e[t][o],n))return"?"===t?r:t}else if(Z(e[t],n))return"?"===t?r:t;return n},G={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},$={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[f,[A,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[f,[A,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[A,f],[/opios[\/ ]+([\w\.]+)/i],[f,[A,O+" Mini"]],[/\bopr\/([\w\.]+)/i],[f,[A,O]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,/(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,/(ba?idubrowser)[\/ ]?([\w\.]+)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,/(heytap|ovi)browser\/([\d\.]+)/i,/(weibo)__([\d\.]+)/i],[A,f],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[f,[A,"UC"+_]],[/microm.+\bqbcore\/([\w\.]+)/i,/\bqbcore\/([\w\.]+).+microm/i],[f,[A,"WeChat(Win) Desktop"]],[/micromessenger\/([\w\.]+)/i],[f,[A,"WeChat"]],[/konqueror\/([\w\.]+)/i],[f,[A,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[f,[A,"IE"]],[/ya(?:search)?browser\/([\w\.]+)/i],[f,[A,"Yandex"]],[/(avast|avg)\/([\w\.]+)/i],[[A,/(.+)/,"$1 Secure "+_],f],[/\bfocus\/([\w\.]+)/i],[f,[A,T+" Focus"]],[/\bopt\/([\w\.]+)/i],[f,[A,O+" Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[f,[A,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[f,[A,"Dolphin"]],[/coast\/([\w\.]+)/i],[f,[A,O+" Coast"]],[/miuibrowser\/([\w\.]+)/i],[f,[A,"MIUI "+_]],[/fxios\/([-\w\.]+)/i],[f,[A,T]],[/\bqihu|(qi?ho?o?|360)browser/i],[[A,"360 "+_]],[/(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i],[[A,/(.+)/,"$1 "+_],f],[/(comodo_dragon)\/([\w\.]+)/i],[[A,/_/g," "],f],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i],[A,f],[/(metasr)[\/ ]?([\w\.]+)/i,/(lbbrowser)/i,/\[(linkedin)app\]/i],[A],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[A,D],f],[/(kakao(?:talk|story))[\/ ]([\w\.]+)/i,/(naver)\(.*?(\d+\.[\w\.]+).*\)/i,/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(chromium|instagram)[\/ ]([-\w\.]+)/i],[A,f],[/\bgsa\/([\w\.]+) .*safari\//i],[f,[A,"GSA"]],[/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i],[f,[A,"TikTok"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[f,[A,S+" Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[A,S+" WebView"],f],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[f,[A,"Android "+_]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[A,f],[/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],[f,[A,"Mobile Safari"]],[/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],[f,A],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[A,[f,X,{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}]],[/(webkit|khtml)\/([\w\.]+)/i],[A,f],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[A,"Netscape"],f],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[f,[A,T+" Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i,/panasonic;(viera)/i],[A,f],[/(cobalt)\/([\w\.]+)/i],[A,[f,/master.|lts./,""]]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[[g,"amd64"]],[/(ia32(?=;))/i],[[g,H]],[/((?:i[346]|x)86)[;\)]/i],[[g,"ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[[g,"arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[[g,"armhf"]],[/windows (ce|mobile); ppc;/i],[[g,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[[g,/ower/,"",H]],[/(sun4\w)[;\)]/i],[[g,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[[g,H]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[d,[b,M],[p,v]],[/\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,/samsung[- ]([-\w]+)/i,/sec-(sgh\w+)/i],[d,[b,M],[p,m]],[/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i],[d,[b,B],[p,m]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[d,[b,B],[p,v]],[/(macintosh);/i],[d,[b,B]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[d,[b,W],[p,m]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[d,[b,P],[p,v]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i],[d,[b,P],[p,m]],[/\b(poco[\w ]+)(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i],[[d,/_/g," "],[b,R],[p,m]],[/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[d,/_/g," "],[b,R],[p,v]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[d,[b,"OPPO"],[p,m]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[d,[b,"Vivo"],[p,m]],[/\b(rmx[12]\d{3})(?: bui|;|\))/i],[d,[b,"Realme"],[p,m]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[d,[b,L],[p,m]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[d,[b,L],[p,v]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[d,[b,j],[p,v]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[d,[b,j],[p,m]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[d,[b,"Lenovo"],[p,v]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[d,/_/g," "],[b,"Nokia"],[p,m]],[/(pixel c)\b/i],[d,[b,z],[p,v]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[d,[b,z],[p,m]],[/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[d,[b,I],[p,m]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[d,"Xperia Tablet"],[b,I],[p,v]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[d,[b,"OnePlus"],[p,m]],[/(alexa)webm/i,/(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[d,[b,x],[p,v]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[d,/(.+)/g,"Fire Phone $1"],[b,x],[p,m]],[/(playbook);[-\w\),; ]+(rim)/i],[d,b,[p,v]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[d,[b,k],[p,m]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[d,[b,y],[p,v]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[d,[b,y],[p,m]],[/(nexus 9)/i],[d,[b,"HTC"],[p,v]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i],[b,[d,/_/g," "],[p,m]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[d,[b,"Acer"],[p,v]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[d,[b,"Meizu"],[p,m]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[b,d,[p,m]],[/(kobo)\s(ereader|touch)/i,/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[b,d,[p,v]],[/(surface duo)/i],[d,[b,q],[p,v]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[d,[b,"Fairphone"],[p,m]],[/(u304aa)/i],[d,[b,"AT&T"],[p,m]],[/\bsie-(\w*)/i],[d,[b,"Siemens"],[p,m]],[/\b(rct\w+) b/i],[d,[b,"RCA"],[p,v]],[/\b(venue[\d ]{2,7}) b/i],[d,[b,"Dell"],[p,v]],[/\b(q(?:mv|ta)\w+) b/i],[d,[b,"Verizon"],[p,v]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[d,[b,"Barnes & Noble"],[p,v]],[/\b(tm\d{3}\w+) b/i],[d,[b,"NuVision"],[p,v]],[/\b(k88) b/i],[d,[b,"ZTE"],[p,v]],[/\b(nx\d{3}j) b/i],[d,[b,"ZTE"],[p,m]],[/\b(gen\d{3}) b.+49h/i],[d,[b,"Swiss"],[p,m]],[/\b(zur\d{3}) b/i],[d,[b,"Swiss"],[p,v]],[/\b((zeki)?tb.*\b) b/i],[d,[b,"Zeki"],[p,v]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[b,"Dragon Touch"],d,[p,v]],[/\b(ns-?\w{0,9}) b/i],[d,[b,"Insignia"],[p,v]],[/\b((nxa|next)-?\w{0,9}) b/i],[d,[b,"NextBook"],[p,v]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[b,"Voice"],d,[p,m]],[/\b(lvtel\-)?(v1[12]) b/i],[[b,"LvTel"],d,[p,m]],[/\b(ph-1) /i],[d,[b,"Essential"],[p,m]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[d,[b,"Envizen"],[p,v]],[/\b(trio[-\w\. ]+) b/i],[d,[b,"MachSpeed"],[p,v]],[/\btu_(1491) b/i],[d,[b,"Rotor"],[p,v]],[/(shield[\w ]+) b/i],[d,[b,"Nvidia"],[p,v]],[/(sprint) (\w+)/i],[b,d,[p,m]],[/(kin\.[onetw]{3})/i],[[d,/\./g," "],[b,q],[p,m]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[d,[b,N],[p,v]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[d,[b,N],[p,m]],[/smart-tv.+(samsung)/i],[b,[p,h]],[/hbbtv.+maple;(\d+)/i],[[d,/^/,"SmartTV"],[b,M],[p,h]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[b,j],[p,h]],[/(apple) ?tv/i],[b,[d,B+" TV"],[p,h]],[/crkey/i],[[d,S+"cast"],[b,z],[p,h]],[/droid.+aft(\w)( bui|\))/i],[d,[b,x],[p,h]],[/\(dtv[\);].+(aquos)/i,/(aquos-tv[\w ]+)\)/i],[d,[b,W],[p,h]],[/(bravia[\w ]+)( bui|\))/i],[d,[b,I],[p,h]],[/(mitv-\w{5}) bui/i],[d,[b,R],[p,h]],[/Hbbtv.*(technisat) (.*);/i],[b,d,[p,h]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i],[[b,V],[d,V],[p,h]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[p,h]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[b,d,[p,w]],[/droid.+; (shield) bui/i],[d,[b,"Nvidia"],[p,w]],[/(playstation [345portablevi]+)/i],[d,[b,I],[p,w]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[d,[b,q],[p,w]],[/((pebble))app/i],[b,d,[p,E]],[/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i],[d,[b,B],[p,E]],[/droid.+; (glass) \d/i],[d,[b,z],[p,E]],[/droid.+; (wt63?0{2,3})\)/i],[d,[b,N],[p,E]],[/(quest( 2| pro)?)/i],[d,[b,D],[p,E]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[b,[p,C]],[/(aeobc)\b/i],[d,[b,x],[p,C]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i],[d,[p,m]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[d,[p,v]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[p,v]],[/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i],[[p,m]],[/(android[-\w\. ]{0,9});.+buil/i],[d,[b,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[f,[A,"EdgeHTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[f,[A,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i,/\b(libweb)/i],[A,f],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[f,A]],os:[[/microsoft (windows) (vista|xp)/i],[A,f],[/(windows) nt 6\.2; (arm)/i,/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,/(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i],[A,[f,X,G]],[/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[A,"Windows"],[f,X,G]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/ios;fbsv\/([\d\.]+)/i,/cfnetwork\/.+darwin/i],[[f,/_/g,"."],[A,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[A,U],[f,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],[f,A],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[A,f],[/\(bb(10);/i],[f,[A,k]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[f,[A,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[f,[A,T+" OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[f,[A,"webOS"]],[/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i],[f,[A,"watchOS"]],[/crkey\/([\d\.]+)/i],[f,[A,S+"cast"]],[/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i],[[A,Y],f],[/panasonic;(viera)/i,/(netrange)mmh/i,/(nettv)\/(\d+\.[\w\.]+)/i,/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[A,f],[/(sunos) ?([\w\.\d]*)/i],[[A,"Solaris"],f],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,/(unix) ?([\w\.]*)/i],[A,f]]},J=function(n,e){if(typeof n===c&&(e=n,n=r),!(this instanceof J))return new J(n,e).getResult();var t=typeof i!==s&&i.navigator?i.navigator:r,o=n||(t&&t.userAgent?t.userAgent:""),w=t&&t.userAgentData?t.userAgentData:r,h=e?function(n,e){var t={};for(var o in n)e[o]&&e[o].length%2==0?t[o]=e[o].concat(n[o]):t[o]=n[o];return t}($,e):$,E=t&&t.userAgent==o;return this.getBrowser=function(){var n,e={};return e[A]=r,e[f]=r,K.call(e,o,h.browser),e[l]=typeof(n=e[f])===u?n.replace(/[^\d\.]/g,"").split(".")[0]:r,E&&t&&t.brave&&typeof t.brave.isBrave==a&&(e[A]="Brave"),e},this.getCPU=function(){var n={};return n[g]=r,K.call(n,o,h.cpu),n},this.getDevice=function(){var n={};return n[b]=r,n[d]=r,n[p]=r,K.call(n,o,h.device),E&&!n[p]&&w&&w.mobile&&(n[p]=m),E&&"Macintosh"==n[d]&&t&&typeof t.standalone!==s&&t.maxTouchPoints&&t.maxTouchPoints>2&&(n[d]="iPad",n[p]=v),n},this.getEngine=function(){var n={};return n[A]=r,n[f]=r,K.call(n,o,h.engine),n},this.getOS=function(){var n={};return n[A]=r,n[f]=r,K.call(n,o,h.os),E&&!n[A]&&w&&"Unknown"!=w.platform&&(n[A]=w.platform.replace(/chrome os/i,Y).replace(/macos/i,U)),n},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return o},this.setUA=function(n){return o=typeof n===u&&n.length>350?V(n,350):n,this},this.setUA(o),this};J.VERSION="1.0.35",J.BROWSER=F([A,f,l]),J.CPU=F([g]),J.DEVICE=F([d,b,p,w,m,h,v,E,C]),J.ENGINE=J.OS=F([A,f]),typeof e!==s?(n.exports&&(e=n.exports=J),e.UAParser=J):t.amdO?(o=function(){return J}.call(e,t,e,n))===r||(n.exports=o):typeof i!==s&&(i.UAParser=J);var Q=typeof i!==s&&(i.jQuery||i.Zepto);if(Q&&!Q.ua){var nn=new J;Q.ua=nn.getResult(),Q.ua.get=function(){return nn.getUA()},Q.ua.set=function(n){nn.setUA(n);var e=nn.getResult();for(var t in e)Q.ua[t]=e[t]}}}("object"==typeof window?window:this)},837:(n,e,t)=>{"use strict";n.exports=t.p+"bf468b98f99fe3cb600c.svg"},790:(n,e,t)=>{"use strict";n.exports=t.p+"cb3e629604702ef8bc66.svg"},373:(n,e,t)=>{"use strict";n.exports=t.p+"550985caaa8859d4b95f.svg"},516:(n,e,t)=>{"use strict";n.exports=t.p+"80392182d321c655d4d0.svg"},82:(n,e,t)=>{"use strict";n.exports=t.p+"52d88d31d700c20dcc04.svg"}},e={};function t(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={id:o,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.exports}t.m=n,t.amdO={},t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");o.length&&(n=o[o.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{"use strict";var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])},n(e,t)};function e(n,e,t,o){return new(t||(t=Promise))((function(i,r){function a(n){try{c(o.next(n))}catch(n){r(n)}}function s(n){try{c(o.throw(n))}catch(n){r(n)}}function c(n){var e;n.done?i(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(a,s)}c((o=o.apply(n,e||[])).next())}))}function o(n,e){var t,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(s){return function(c){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;r&&(r=0,s[0]&&(a=0)),a;)try{if(t=1,o&&(i=2&s[0]?o.return:s[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,s[1])).done)return i;switch(o=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,o=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(n,a)}catch(n){s=[6,n],o=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}}function i(n,e,t){if(t||2===arguments.length)for(var o,i=0,r=e.length;i<r;i++)!o&&i in e||(o||(o=Array.prototype.slice.call(e,0,i)),o[i]=e[i]);return n.concat(o||Array.prototype.slice.call(e))}Object.create,Object.create;const r={i8:"1.8.0"};var a="awesomium",s="cef",c="cefsharp",u="coachjs",l="electron",d="fminer",A="geb",p="nightmarejs",b="phantomas",f="phantomjs",g="rhino",w="selenium",m="sequentum",v="slimerjs",h="webdriverio",E="webdriver",C="headless_chrome",x="unknown",B=function(e){function t(n,o){var i=e.call(this,o)||this;return i.state=n,i.name="BotdError",Object.setPrototypeOf(i,t.prototype),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}(t,e),t}(Error);function y(n){return e(this,void 0,void 0,(function(){var t,i,r=this;return o(this,(function(a){switch(a.label){case 0:return t={},i=Object.keys(n),[4,Promise.all(i.map((function(i){return e(r,void 0,void 0,(function(){var e,r,a,s,c;return o(this,(function(o){switch(o.label){case 0:e=n[i],o.label=1;case 1:return o.trys.push([1,3,,4]),r=t,a=i,c={},[4,e()];case 2:return r[a]=(c.value=o.sent(),c.state=0,c),[3,4];case 3:return s=o.sent(),t[i]=s instanceof B?{state:s.state,error:"".concat(s.name,": ").concat(s.message)}:{state:-3,error:s instanceof Error?"".concat(s.name,": ").concat(s.message):String(s)},[3,4];case 4:return[2]}}))}))})))];case 1:return a.sent(),[2,t]}}))}))}function k(n,e){return-1!==n.indexOf(e)}function _(n,e){return-1!==n.indexOf(e)}function S(n){return Object.getOwnPropertyNames(n)}function T(n){for(var e=[],t=1;t<arguments.length;t++)e[t-1]=arguments[t];for(var o=function(e){if("string"==typeof e){if(k(n,e))return{value:!0}}else if(null!=function(n,e){if("find"in n)return n.find(e);for(var t=0;t<n.length;t++)if(e(n[t]))return n[t]}(n,(function(n){return e.test(n)})))return{value:!0}},i=0,r=e;i<r.length;i++){var a=o(r[i]);if("object"==typeof a)return a.value}return!1}function z(n){return n.reduce((function(n,e){return n+(e?1:0)}),0)}var P={detectAppVersion:function(n){var e=n.appVersion;return 0===e.state&&(/headless/i.test(e.value)?C:/electron/i.test(e.value)?l:/slimerjs/i.test(e.value)?v:void 0)},detectDocumentAttributes:function(n){var e=n.documentElementKeys;return 0===e.state&&(T(e.value,"selenium","webdriver","driver")?w:void 0)},detectErrorTrace:function(n){var e=n.errorTrace;return 0===e.state&&(/PhantomJS/i.test(e.value)?f:void 0)},detectEvalLengthInconsistency:function(n){var e=n.evalLength,t=n.browserKind,o=n.browserEngineKind;if(0===e.state&&0===t.state&&0===o.state){var i=e.value;return"unknown"!==o.value&&(37===i&&!k(["webkit","gecko"],o.value)||39===i&&!k(["internet_explorer"],t.value)||33===i&&!k(["chromium"],o.value))}},detectFunctionBind:function(n){if(-2===n.functionBind.state)return f},detectLanguagesLengthInconsistency:function(n){var e=n.languages;if(0===e.state&&0===e.value.length)return C},detectNotificationPermissions:function(n){var e=n.notificationPermissions,t=n.browserKind;return 0===t.state&&"chrome"===t.value&&(0===e.state&&e.value?C:void 0)},detectPluginsArray:function(n){var e=n.pluginsArray;if(0===e.state&&!e.value)return C},detectPluginsLengthInconsistency:function(n){var e=n.pluginsLength,t=n.android,o=n.browserKind,i=n.browserEngineKind;if(0===e.state&&0===t.state&&0===o.state&&0===i.state&&"chrome"===o.value&&!t.value&&"chromium"===i.value)return 0===e.value?C:void 0},detectProcess:function(n){var e,t=n.process;return 0===t.state&&("renderer"===t.value.type||null!=(null===(e=t.value.versions)||void 0===e?void 0:e.electron)?l:void 0)},detectUserAgent:function(n){var e=n.userAgent;return 0===e.state&&(/PhantomJS/i.test(e.value)?f:/Headless/i.test(e.value)?C:/Electron/i.test(e.value)?l:/slimerjs/i.test(e.value)?v:void 0)},detectWebDriver:function(n){var e=n.webDriver;if(0===e.state&&e.value)return C},detectWebGL:function(n){var e=n.webGL;if(0===e.state){var t=e.value,o=t.vendor,i=t.renderer;if("Brian Paul"==o&&"Mesa OffScreen"==i)return C}},detectWindowExternal:function(n){var e=n.windowExternal;return 0===e.state&&(/Sequentum/i.test(e.value)?m:void 0)},detectWindowSize:function(n){var e=n.windowSize,t=n.documentFocus;if(0!==e.state||0!==t.state)return!1;var o=e.value,i=o.outerWidth,r=o.outerHeight;return t.value&&0===i&&0===r?C:void 0},detectMimeTypesConsistent:function(n){var e=n.mimeTypesConsistent;if(0===e.state&&!e.value)return x},detectProductSub:function(n){var e=n.productSub,t=n.browserKind;return 0===e.state&&0===t.state&&("chrome"!==t.value&&"safari"!==t.value&&"opera"!==t.value&&"wechat"!==t.value||"20030107"===e.value?void 0:x)},detectDistinctiveProperties:function(n){var e=n.distinctiveProps;if(0!==e.state)return!1;var t,o=e.value;for(t in o)if(o[t])return t}};function j(){var n,e,t=window,o=navigator;return z(["webkitPersistentStorage"in o,"webkitTemporaryStorage"in o,0===o.vendor.indexOf("Google"),"webkitResolveLocalFileSystemURL"in t,"BatteryManager"in t,"webkitMediaStream"in t,"webkitSpeechGrammar"in t])>=5?"chromium":z(["ApplePayError"in t,"CSSPrimitiveValue"in t,"Counter"in t,0===o.vendor.indexOf("Apple"),"getStorageUpdates"in o,"WebKitMediaKeys"in t])>=4?"webkit":z(["buildID"in navigator,"MozAppearance"in(null!==(e=null===(n=document.documentElement)||void 0===n?void 0:n.style)&&void 0!==e?e:{}),"onmozfullscreenchange"in t,"mozInnerScreenX"in t,"CSSMozDocumentRule"in t,"CanvasCaptureMediaStream"in t])>=4?"gecko":"unknown"}function q(){var n,e=null===(n=navigator.userAgent)||void 0===n?void 0:n.toLowerCase();return _(e,"edg/")?"edge":_(e,"safari")?"safari":_(e,"trident")||_(e,"msie")?"internet_explorer":_(e,"wechat")?"wechat":_(e,"firefox")?"firefox":_(e,"opera")||_(e,"opr")?"opera":_(e,"chrome")?"chrome":"unknown"}function L(){var n=j(),e="chromium"===n,t="gecko"===n;if(!e&&!t)return!1;var o=window;return z(["onorientationchange"in o,"orientation"in o,e&&!("SharedWorker"in o),t&&/android/i.test(navigator.appVersion)])>=2}function O(){if(void 0===window.CSS)throw new B(-1,"window.CSS is undefined");return CSS.supports("-moz-appearance","auto")}function M(){return void 0!==document.hasFocus&&document.hasFocus()}function W(){if("iPad"===navigator.platform)return!0;var n=screen,e=n.width/n.height;return z(["MediaSource"in window,!!Element.prototype.webkitRequestFullscreen,e>.65&&e<1.53])>=2}var I={android:L,browserKind:q,browserEngineKind:j,documentFocus:M,userAgent:function(){return navigator.userAgent},appVersion:function(){var n=navigator.appVersion;if(null==n)throw new B(-1,"navigator.appVersion is undefined");return n},rtt:function(){if(void 0===navigator.connection)throw new B(-1,"navigator.connection is undefined");if(void 0===navigator.connection.rtt)throw new B(-1,"navigator.connection.rtt is undefined");return navigator.connection.rtt},windowSize:function(){return{outerWidth:window.outerWidth,outerHeight:window.outerHeight,innerWidth:window.innerWidth,innerHeight:window.innerHeight}},pluginsLength:function(){if(void 0===navigator.plugins)throw new B(-1,"navigator.plugins is undefined");if(void 0===navigator.plugins.length)throw new B(-3,"navigator.plugins.length is undefined");return navigator.plugins.length},pluginsArray:function(){if(void 0===navigator.plugins)throw new B(-1,"navigator.plugins is undefined");if(void 0===window.PluginArray)throw new B(-1,"window.PluginArray is undefined");return navigator.plugins instanceof PluginArray},errorTrace:function(){try{null[0]()}catch(n){if(n instanceof Error&&null!=n.stack)return n.stack.toString()}throw new B(-3,"errorTrace signal unexpected behaviour")},productSub:function(){var n=navigator.productSub;if(void 0===n)throw new B(-1,"navigator.productSub is undefined");return n},windowExternal:function(){if(void 0===window.external)throw new B(-1,"window.external is undefined");var n=window.external;if("function"!=typeof n.toString)throw new B(-2,"window.external.toString is not a function");return n.toString()},mimeTypesConsistent:function(){if(void 0===navigator.mimeTypes)throw new B(-1,"navigator.mimeTypes is undefined");for(var n=navigator.mimeTypes,e=Object.getPrototypeOf(n)===MimeTypeArray.prototype,t=0;t<n.length;t++)e&&(e=Object.getPrototypeOf(n[t])===MimeType.prototype);return e},evalLength:function(){return eval.toString().length},webGL:function(){var n=document.createElement("canvas");if("function"!=typeof n.getContext)throw new B(-2,"HTMLCanvasElement.getContext is not a function");var e=n.getContext("webgl");if(null===e)throw new B(-4,"WebGLRenderingContext is null");if("function"!=typeof e.getParameter)throw new B(-2,"WebGLRenderingContext.getParameter is not a function");return{vendor:e.getParameter(e.VENDOR),renderer:e.getParameter(e.RENDERER)}},webDriver:function(){if(null==navigator.webdriver)throw new B(-1,"navigator.webdriver is undefined");return navigator.webdriver},languages:function(){var n,e=navigator,t=[],o=e.language||e.userLanguage||e.browserLanguage||e.systemLanguage;if(void 0!==o&&t.push([o]),Array.isArray(e.languages))"chromium"===j()&&z([!("MediaSettingsRange"in(n=window)),"RTCEncodedAudioFrame"in n,""+n.Intl=="[object Intl]",""+n.Reflect=="[object Reflect]"])>=3||t.push(e.languages);else if("string"==typeof e.languages){var i=e.languages;i&&t.push(i.split(","))}return t},notificationPermissions:function(){return e(this,void 0,void 0,(function(){var n,e;return o(this,(function(t){switch(t.label){case 0:if(void 0===window.Notification)throw new B(-1,"window.Notification is undefined");if(void 0===navigator.permissions)throw new B(-1,"navigator.permissions is undefined");if("function"!=typeof(n=navigator.permissions).query)throw new B(-2,"navigator.permissions.query is not a function");t.label=1;case 1:return t.trys.push([1,3,,4]),[4,n.query({name:"notifications"})];case 2:return e=t.sent(),[2,"denied"===window.Notification.permission&&"prompt"===e.state];case 3:throw t.sent(),new B(-3,"notificationPermissions signal unexpected behaviour");case 4:return[2]}}))}))},documentElementKeys:function(){if(void 0===document.documentElement)throw new B(-1,"document.documentElement is undefined");var n=document.documentElement;if("function"!=typeof n.getAttributeNames)throw new B(-2,"document.documentElement.getAttributeNames is not a function");return n.getAttributeNames()},functionBind:function(){if(void 0===Function.prototype.bind)throw new B(-2,"Function.prototype.bind is undefined");return Function.prototype.bind.toString()},process:function(){if(void 0===window.process)throw new B(-1,"window.process is undefined");return window.process},distinctiveProps:function(){var n,e,t=((n={})[a]={window:["awesomium"]},n[s]={window:["RunPerfTest"]},n[c]={window:["CefSharp"]},n[u]={window:["emit"]},n[d]={window:["fmget_targets"]},n[A]={window:["geb"]},n[p]={window:["__nightmare","nightmare"]},n[b]={window:["__phantomas"]},n[f]={window:["callPhantom","_phantom"]},n[g]={window:["spawn"]},n[w]={window:["_Selenium_IDE_Recorder","_selenium","calledSelenium",/^([a-z]){3}_.*_(Array|Promise|Symbol)$/],document:["__selenium_evaluate","selenium-evaluate","__selenium_unwrapped"]},n[h]={window:["wdioElectron"]},n[E]={window:["webdriver","__webdriverFunc","__lastWatirAlert","__lastWatirConfirm","__lastWatirPrompt","_WEBDRIVER_ELEM_CACHE","ChromeDriverw"],document:["__webdriver_script_fn","__driver_evaluate","__webdriver_evaluate","__fxdriver_evaluate","__driver_unwrapped","__webdriver_unwrapped","__fxdriver_unwrapped","__webdriver_script_fn","__webdriver_script_func","__webdriver_script_function","$cdc_asdjflasutopfhvcZLmcf","$cdc_asdjflasutopfhvcZLmcfl_","$chrome_asyncScriptInfo","__$webdriverAsyncExecutor"]},n[C]={window:["domAutomation","domAutomationController"]},n),o={},r=S(window),l=[];for(e in void 0!==window.document&&(l=S(window.document)),t){var m=t[e];if(void 0!==m){var v=void 0!==m.window&&T.apply(void 0,i([r],m.window,!1)),x=!(void 0===m.document||!l.length)&&T.apply(void 0,i([l],m.document,!1));o[e]=v||x}}return o}},R=function(){function n(){this.components=void 0,this.detections=void 0}return n.prototype.getComponents=function(){return this.components},n.prototype.getDetections=function(){return this.detections},n.prototype.detect=function(){if(void 0===this.components)throw new Error("BotDetector.detect can't be called before BotDetector.collect");var n=function(n,e){var t={},o={bot:!1};for(var i in e){var r=(0,e[i])(n),a={bot:!1};"string"==typeof r?a={bot:!0,botKind:r}:r&&(a={bot:!0,botKind:x}),t[i]=a,a.bot&&(o=a)}return[t,o]}(this.components,P),e=n[0],t=n[1];return this.detections=e,t},n.prototype.collect=function(){return e(this,void 0,void 0,(function(){var n;return o(this,(function(e){switch(e.label){case 0:return n=this,[4,y(I)];case 1:return n.components=e.sent(),[2,this.components]}}))}))},n}();const N=R;function D(n){var t=(void 0===n?{}:n).monitoring,i=void 0===t||t;return e(this,void 0,void 0,(function(){var n;return o(this,(function(e){switch(e.label){case 0:return i&&function(){if(!(window.__fpjs_d_m||Math.random()>=.001))try{var n=new XMLHttpRequest;n.open("get","https://m1.openfpcdn.io/botd/v".concat(r.i8,"/npm-monitoring"),!0),n.send()}catch(n){console.error(n)}}(),[4,(n=new N).collect()];case 1:return e.sent(),[2,n]}}))}))}var Y=t(238);function U(){var n=(new Y.UAParser).getBrowser().version;if(void 0!==n)return{major:parseInt(n.split(".")[0]),minor:parseInt(n.split(".")[1])}}var F=t(379),Z=t.n(F),H=t(795),V=t.n(H),K=t(569),X=t.n(K),G=t(565),$=t.n(G),J=t(216),Q=t.n(J),nn=t(589),en=t.n(nn),tn=t(800),on={};on.styleTagTransform=en(),on.setAttributes=$(),on.insert=X().bind(null,"head"),on.domAPI=V(),on.insertStyleElement=Q(),Z()(tn.Z,on),tn.Z&&tn.Z.locals&&tn.Z.locals;var rn=void 0,an=function(){return e(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){switch(t.label){case 0:return[4,e(void 0,void 0,void 0,(function(){var n,e,t,i,r,a,s,c,u,l;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),n=performance.now(),[4,D()];case 1:return e=o.sent(),t=performance.now()-n,i=e.detect(),r=performance.now()-n,a=null!==(u=e.getComponents())&&void 0!==u?u:{},s=null!==(l=e.getDetections())&&void 0!==l?l:{},c={browserEngineKind:j(),browserKind:q(),browserVersion:U(),documentFocus:M(),mozAppearanceSupport:O(),isAndroid:L(),isDesktopWebKit:(d=window,A=d.HTMLElement,p=d.Document,z(["safari"in d,!("ongestureend"in d),!("TouchEvent"in d),!("orientation"in d),A&&!("autocapitalize"in A.prototype),p&&"pointerLockElement"in p.prototype])>=4),isIPad:W()},[2,{isError:!1,collectionTime:t,detectionTime:r,detectionResult:i,detectedBot:(null==i?void 0:i.bot)?i.botKind:void 0,collectedData:a,detectorsResults:s,debugData:c}];case 2:return[2,{isError:!0,error:o.sent()}];case 3:return[2]}var d,A,p}))}))];case 1:return n=t.sent(),rn=n,function(n){var e=document.getElementById("result"),t=document.getElementById("result-text"),o=document.getElementById("collection-time"),i=document.getElementById("detection-time"),r=document.getElementById("detection-result"),a=document.getElementById("detectors"),s=document.getElementById("debug-data"),c=document.getElementById("collected-data"),u=document.getElementById("error-container"),l=document.getElementById("error-message");if(e.classList.remove("result-detected","result-error"),n.isError)return t.innerHTML="An error occured",e.classList.add("result-error"),u.classList.add("error-container-visible"),void(l.textContent=n.error.message);u.classList.remove("error-container-visible"),null!=n.detectedBot?(t.innerHTML="".concat(n.detectedBot," detected."),e.classList.add("result-detected")):t.innerHTML="You are not a bot.",o.textContent="".concat(n.collectionTime.toFixed(2),"ms"),i.textContent="".concat(n.detectionTime.toFixed(2),"ms"),r.textContent=JSON.stringify(n.detectionResult,null,4),a.textContent=JSON.stringify(n.detectorsResults,null,4),s.textContent=JSON.stringify(n.debugData,null,4),c.textContent=JSON.stringify(n.collectedData,null,4)}(n),[2]}}))}))};window.onload=function(){var n=document.getElementById("detect-button"),e=document.getElementById("copy-logs-button");n.addEventListener("click",(function(){an()})),e.addEventListener("click",(function(){navigator.clipboard.writeText(JSON.stringify(rn)).then((function(){alert("BotD logs copied to clipboard")}))})),an()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,